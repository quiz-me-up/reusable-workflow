name: Delete all Docker Hub images from organization

on:
  workflow_dispatch:
    inputs:
      confirm_deletion:
        description: 'Type "CONFIRM" to confirm deletion'
        required: true
        type: string
      repository_name:
        description: 'Repository name (optional - if empty, deletes all org repositories)'
        required: false
        type: string

permissions:
  contents: read

env:
  DOCKERHUB_TOKEN: ${{ secrets.QUIZ_ME_UP_DOCKER_TOKEN }}
  DOCKERHUB_USERNAME: ${{ secrets.QUIZ_ME_UP_DOCKER_USERNAME }}
  DOCKERHUB_NAMESPACE: ${{ secrets.QUIZ_ME_UP_DOCKER_NAMESPACE }}

jobs:
  list-repositories:
    runs-on: ubuntu-latest
    outputs:
      repositories: ${{ steps.get-repositories.outputs.repositories }}
      has_repositories: ${{ steps.get-repositories.outputs.has_repositories }}
    steps:
      - name: Verify confirmation
        if: github.event.inputs.confirm_deletion != 'CONFIRM'
        run: |
          echo "‚ùå Deletion cancelled - confirmation required"
          exit 1

      - name: Authenticate with Docker Hub
        id: docker-auth
        run: |
          echo "üîê Authenticating with Docker Hub..."
          
          response=$(curl -s -X POST \
            -H "Content-Type: application/json" \
            -d "{\"username\": \"$DOCKERHUB_USERNAME\", \"password\": \"$DOCKERHUB_TOKEN\"}" \
            "https://hub.docker.com/v2/users/login/")
          
          auth_token=$(echo "$response" | jq -r '.token // empty')
          
          if [ -z "$auth_token" ] || [ "$auth_token" == "null" ]; then
            echo "‚ùå Failed to authenticate with Docker Hub"
            echo "Response: $response"
            exit 1
          fi
          
          echo "‚úÖ Successfully authenticated with Docker Hub"
          echo "auth_token=$auth_token" >> $GITHUB_OUTPUT

      - name: List Docker Hub repositories
        id: get-repositories
        run: |
          if [ -n "${{ github.event.inputs.repository_name }}" ]; then
            echo "üîç Processing specific repository: ${{ github.event.inputs.repository_name }}"
            repositories="[\"${{ github.event.inputs.repository_name }}\"]"
            has_repos="true"
          else
            echo "üîç Fetching all repositories from Docker Hub namespace: $DOCKERHUB_NAMESPACE"
          
            all_repos=""
            page=1
            has_repos="false"
          
            while true; do
              echo "üìÑ Fetching page $page..."
          
              repositories_response=$(curl -s -w "HTTPSTATUS:%{http_code}" \
                -H "Authorization: JWT ${{ steps.docker-auth.outputs.auth_token }}" \
                -H "Accept: application/json" \
                --max-time 30 \
                "https://hub.docker.com/v2/repositories/$DOCKERHUB_NAMESPACE/?page=$page&page_size=100")
          
              http_code=$(echo "$repositories_response" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
              response_body=$(echo "$repositories_response" | sed 's/HTTPSTATUS:[0-9]*$//')
          
              case $http_code in
                200)
                  echo "‚úÖ Successfully fetched page $page"
                  ;;
                404)
                  echo "‚ÑπÔ∏è Namespace not found or no repositories (404): $DOCKERHUB_NAMESPACE"
                  response_body='{"results": []}'
                  ;;
                401|403)
                  echo "‚ùå Access denied ($http_code) - check credentials"
                  exit 1
                  ;;
                429)
                  echo "‚è±Ô∏è Rate limited (429) - waiting 30 seconds..."
                  sleep 30
                  continue
                  ;;
                *)
                  echo "‚ùå Unexpected HTTP status: $http_code"
                  exit 1
                  ;;
              esac
          
              if ! echo "$response_body" | jq empty 2>/dev/null; then
                echo "‚ùå Invalid JSON response"
                response_body='{"results": []}'
              fi
          
              page_repos=$(echo "$response_body" | jq -r '.results[]?.name // empty' 2>/dev/null | grep -v '^$' || echo "")
          
              if [ -n "$page_repos" ]; then
                echo "üì¶ Found repositories on page $page"
                if [ -n "$all_repos" ]; then
                  all_repos="$all_repos"$'\n'"$page_repos"
                else
                  all_repos="$page_repos"
                fi
                has_repos="true"
              fi
          
              next_page=$(echo "$response_body" | jq -r '.next // empty')
              if [ -z "$next_page" ] || [ "$next_page" == "null" ]; then
                break
              fi
          
              page=$((page + 1))
              if [ $page -gt 100 ]; then
                echo "‚ö†Ô∏è Reached page limit - stopping"
                break
              fi
            done
          
            if [ "$has_repos" == "true" ] && [ -n "$all_repos" ]; then
              repositories=$(echo "$all_repos" | jq -R -s 'split("\n") | map(select(length > 0))' 2>/dev/null || echo "[]")
            else
              repositories="[]"
              has_repos="false"
            fi
          fi
          
          if ! echo "$repositories" | jq empty 2>/dev/null; then
            repositories="[]"
            has_repos="false"
          fi
          
          echo "repositories<<EOF" >> $GITHUB_OUTPUT
          echo "$repositories" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "has_repositories=$has_repos" >> $GITHUB_OUTPUT
          
          repo_count=$(echo "$repositories" | jq length 2>/dev/null || echo "0")
          if [ "$repo_count" -eq 0 ]; then
            echo "‚ÑπÔ∏è No Docker repositories found in namespace: $DOCKERHUB_NAMESPACE"
            echo "‚úÖ This is not an error - the namespace is clean or empty"
          else
            echo "üê≥ Found $repo_count Docker repositories to process"
          fi

  delete-repositories:
    needs: list-repositories
    runs-on: ubuntu-latest
    if: needs.list-repositories.outputs.has_repositories == 'true'
    strategy:
      matrix:
        repository: ${{ fromJson(needs.list-repositories.outputs.repositories) }}
      fail-fast: false
      max-parallel: 5
    steps:
      - name: Re-authenticate with Docker Hub
        id: fresh-auth
        run: |
          echo "üîê Re-authenticating with Docker Hub..."
          
          response=$(curl -s -X POST \
            -H "Content-Type: application/json" \
            --max-time 30 \
            -d "{\"username\": \"$DOCKERHUB_USERNAME\", \"password\": \"$DOCKERHUB_TOKEN\"}" \
            "https://hub.docker.com/v2/users/login/")
          
          auth_token=$(echo "$response" | jq -r '.token // empty')
          
          if [ -z "$auth_token" ] || [ "$auth_token" == "null" ]; then
            echo "‚ùå Failed to re-authenticate"
            exit 1
          fi
          
          echo "‚úÖ Successfully re-authenticated"
          echo "auth_token=$auth_token" >> $GITHUB_OUTPUT

      - name: Delete Docker Hub repository
        run: |
          echo "üóëÔ∏è Processing repository: $DOCKERHUB_NAMESPACE/${{ matrix.repository }}"
          
          AUTH_TOKEN="${{ steps.fresh-auth.outputs.auth_token }}"
          
          # Check if repository exists
          repo_info=$(curl -s -w "HTTPSTATUS:%{http_code}" \
            -H "Authorization: JWT $AUTH_TOKEN" \
            -H "Accept: application/json" \
            --max-time 30 \
            "https://hub.docker.com/v2/repositories/$DOCKERHUB_NAMESPACE/${{ matrix.repository }}/")
          
          http_code=$(echo "$repo_info" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
          response_body=$(echo "$repo_info" | sed 's/HTTPSTATUS:[0-9]*$//')
          
          if [ "$http_code" == "200" ] && echo "$response_body" | jq -e '.name' > /dev/null 2>&1; then
            echo "‚úÖ Repository found"
          
            # Get tag count
            tags_response=$(curl -s \
              -H "Authorization: JWT $AUTH_TOKEN" \
              --max-time 30 \
              "https://hub.docker.com/v2/repositories/$DOCKERHUB_NAMESPACE/${{ matrix.repository }}/tags/?page_size=1")
          
            tags_count=$(echo "$tags_response" | jq -r '.count // 0')
            echo "üìä Repository contains $tags_count tag(s)"
          
            # Delete repository
            echo "üóëÔ∏è Deleting repository..."
            delete_response=$(curl -s -w "HTTPSTATUS:%{http_code}" -X DELETE \
              -H "Authorization: JWT $AUTH_TOKEN" \
              --max-time 60 \
              "https://hub.docker.com/v2/repositories/$DOCKERHUB_NAMESPACE/${{ matrix.repository }}/")
          
            delete_http_code=$(echo "$delete_response" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
          
            case $delete_http_code in
              202|204)
                echo "‚úÖ Repository deleted successfully"
                ;;
              404)
                echo "‚ÑπÔ∏è Repository not found or already deleted"
                ;;
              401|403)
                echo "‚ùå Access denied"
                exit 1
                ;;
              *)
                echo "‚ùå Unexpected error (HTTP $delete_http_code)"
                exit 1
                ;;
            esac
          else
            case $http_code in
              404)
                echo "‚ÑπÔ∏è Repository not found"
                ;;
              401|403)
                echo "‚ùå Access denied"
                exit 1
                ;;
              *)
                echo "‚ùå Error checking repository (HTTP $http_code)"
                exit 1
                ;;
            esac
          fi

      - name: Repository deletion result
        run: |
          echo "üìã Processing completed for repository: $DOCKERHUB_NAMESPACE/${{ matrix.repository }}"

  cleanup-summary:
    needs: [list-repositories, delete-repositories]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Operation summary
        run: |
          echo "# üìã Docker Hub Repository Deletion Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**üê≥ Docker Hub Namespace:** \`$DOCKERHUB_NAMESPACE\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -n "${{ github.event.inputs.repository_name }}" ]; then
            echo "**üéØ Target:** Repository \`${{ github.event.inputs.repository_name }}\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "**üéØ Target:** All namespace repositories" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "**‚öôÔ∏è Mode:** Delete all repositories and their images" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.list-repositories.outputs.has_repositories }}" != "true" ]; then
            echo "**‚úÖ Result:** No Docker repositories found in namespace" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üéâ **This is successful!** Your namespace is already clean." >> $GITHUB_STEP_SUMMARY
          else
            repositories_list='${{ needs.list-repositories.outputs.repositories }}'
            repo_count=$(echo "$repositories_list" | jq length 2>/dev/null || echo "0")
            echo "**üê≥ Repositories processed:** $repo_count" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          
            echo "**üì¶ Repositories:**" >> $GITHUB_STEP_SUMMARY
            if [ "$repositories_list" != "[]" ] && [ -n "$repositories_list" ]; then
              echo "$repositories_list" | jq -r '.[]' 2>/dev/null | head -20 > /tmp/repos.txt
              while IFS= read -r repo; do
                if [ -n "$repo" ]; then
                  echo "- \`$DOCKERHUB_NAMESPACE/$repo\`" >> $GITHUB_STEP_SUMMARY
                fi
              done < /tmp/repos.txt
              rm -f /tmp/repos.txt
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
          
            # Affichage du statut selon le r√©sultat de delete-repositories
            case "${{ needs.delete-repositories.result }}" in
              success)
                echo "**‚úÖ Status:** All repositories deleted successfully" >> $GITHUB_STEP_SUMMARY
                ;;
              failure)
                echo "**‚ùå Status:** Some errors occurred during deletion" >> $GITHUB_STEP_SUMMARY
                ;;
              skipped)
                echo "**‚ö†Ô∏è Status:** Deletion job was skipped (probably no repositories to delete)" >> $GITHUB_STEP_SUMMARY
                ;;
              *)
                echo "**‚ö†Ô∏è Status:** Process was cancelled or encountered an issue" >> $GITHUB_STEP_SUMMARY
                ;;
            esac
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**üïê Completed at:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.list-repositories.outputs.has_repositories }}" != "true" ]; then
            echo "‚úÖ No repositories found - namespace is clean"
          else
            echo "‚úÖ Docker Hub cleanup workflow completed"
          fi


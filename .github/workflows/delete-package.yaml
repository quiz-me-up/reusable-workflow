name: Delete all Maven packages from organization

on:
  workflow_dispatch:
    inputs:
      confirm_deletion:
        description: 'Type "CONFIRM" to confirm deletion'
        required: true
        type: string
      repository_name:
        description: 'Repository name (optional - if empty, deletes all org packages)'
        required: false
        type: string
      keep_at_least_one_version:
        description: 'Keep at least the latest version of each package? (If false, delete entire package)'
        required: false
        type: boolean
        default: true

# Permissions requises
permissions:
  packages: write
  contents: read

# Variable d'environnement globale
env:
  GITHUB_TOKEN: ${{ secrets.QUIZ_ME_UP_GITHUB_TOKEN }}

jobs:
  list-packages:
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.get-packages.outputs.packages }}
    steps:
      - name: Verify confirmation
        if: github.event.inputs.confirm_deletion != 'CONFIRM'
        run: |
          echo "❌ Deletion cancelled - confirmation required"
          exit 1

      - name: List Maven packages
        id: get-packages
        run: |
          if [ -n "${{ github.event.inputs.repository_name }}" ]; then
            echo "🔍 Fetching Maven packages for repository: ${{ github.event.inputs.repository_name }}"
            # Get packages from specific repository
            packages=$(curl -s \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository_owner }}/${{ github.event.inputs.repository_name }}/packages?package_type=maven&per_page=100" \
              | jq -r '.[].name')
          else
            echo "🔍 Fetching all Maven packages from organization..."
            # Get all Maven packages from the organization
            packages=$(curl -s \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/orgs/${{ github.repository_owner }}/packages?package_type=maven&per_page=100" \
              | jq -r '.[].name')
          fi
          
          # Convert to JSON array for matrix
          packages_json=$(echo "$packages" | jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "packages=$packages_json" >> $GITHUB_OUTPUT
          
          echo "📦 Maven packages found:"
          echo "$packages" | while read -r package; do
            if [ -n "$package" ]; then
              echo " - $package"
            fi
          done

  delete-packages:
    needs: list-packages
    runs-on: ubuntu-latest
    if: needs.list-packages.outputs.packages != '[]'
    strategy:
      matrix:
        package: ${{ fromJson(needs.list-packages.outputs.packages) }}
      fail-fast: false
    steps:
      - name: Delete Maven package or versions
        run: |
          echo "🗑️ Processing package: ${{ matrix.package }}"
          
          if [ "${{ github.event.inputs.keep_at_least_one_version }}" == "true" ]; then
            echo "🔄 Mode: Keep latest version - fetching versions..."
          
            # Get all versions for the package (org level)
            versions=$(curl -s \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/orgs/${{ github.repository_owner }}/packages/maven/${{ matrix.package }}/versions?per_page=100" \
              | jq -r '.[] | {id: .id, created_at: .created_at} | @json')
          
            if [ -z "$versions" ]; then
              echo "ℹ️ No versions found for package ${{ matrix.package }} - skipping"
              exit 0
            fi
          
            # Find the latest version by created_at (sort descending and take first)
            latest_version_id=$(echo "$versions" | jq -s 'sort_by(.created_at) | reverse | .[0].id')
            echo "✅ Latest version ID to keep: $latest_version_id"
          
            # Delete all other versions
            deleted_count=0
            echo "$versions" | while read -r version; do
              version_id=$(echo "$version" | jq -r '.id')
              if [ "$version_id" != "$latest_version_id" ]; then
                echo "🗑️ Deleting version $version_id..."
                response=$(curl -s -w "%{http_code}" -X DELETE \
                  -H "Authorization: token $GITHUB_TOKEN" \
                  -H "Accept: application/vnd.github.v3+json" \
                  "https://api.github.com/orgs/${{ github.repository_owner }}/packages/maven/${{ matrix.package }}/versions/$version_id")
          
                http_code="${response: -3}"
                if [ "$http_code" == "204" ]; then
                  echo "✅ Version $version_id deleted"
                  deleted_count=$((deleted_count + 1))
                else
                  echo "❌ Error deleting version $version_id (HTTP $http_code)"
                  exit 1
                fi
              fi
            done
          
            echo "📊 Deleted $deleted_count versions for package ${{ matrix.package }} (kept latest)"
          else
            echo "🔄 Mode: Delete entire package..."
          
            # Delete the entire package
            response=$(curl -s -w "%{http_code}" -X DELETE \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/orgs/${{ github.repository_owner }}/packages/maven/${{ matrix.package }}")
          
            http_code="${response: -3}"
            case $http_code in
              204)
                echo "✅ Package ${{ matrix.package }} deleted successfully"
                ;;
              403)
                echo "❌ Permission denied for package ${{ matrix.package }}"
                echo "Check organization permissions and token scopes"
                exit 1
                ;;
              404)
                echo "ℹ️ Package ${{ matrix.package }} not found or already deleted"
                ;;
              *)
                echo "❌ Unexpected error for package ${{ matrix.package }} (HTTP $http_code)"
                exit 1
                ;;
            esac
          fi

      - name: Deletion result
        run: |
          echo "📋 Processing completed for package: ${{ matrix.package }}"

  cleanup-summary:
    needs: [list-packages, delete-packages]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Operation summary
        run: |
          echo "## 📋 Maven packages deletion summary"
          echo ""
          
          if [ -n "${{ github.event.inputs.repository_name }}" ]; then
            echo "🎯 **Target**: Repository '${{ github.event.inputs.repository_name }}'"
          else
            echo "🎯 **Target**: All organization packages"
          fi
          
          echo "⚙️ **Mode**: Keep latest version? ${{ github.event.inputs.keep_at_least_one_version }}"
          echo ""
          
          if [ "${{ needs.list-packages.outputs.packages }}" == "[]" ]; then
            echo "ℹ️ **Result**: No Maven packages found"
          else
            package_count=$(echo '${{ needs.list-packages.outputs.packages }}' | jq length)
            echo "📦 **Packages processed**: $package_count"
            echo ""
          
            if [ "${{ needs.delete-packages.result }}" == "success" ]; then
              echo "✅ **Status**: Process completed successfully"
            elif [ "${{ needs.delete-packages.result }}" == "failure" ]; then
              echo "❌ **Status**: Some errors occurred during deletion"
            else
              echo "⚠️ **Status**: Process was cancelled or skipped"
            fi
          fi
          
          echo ""
          echo "🕐 **Completed at**: $(date)"
